{"remainingRequest":"/Users/kristinhortsch/dev/TwitchFeed/app/node_modules/thread-loader/dist/cjs.js!/Users/kristinhortsch/dev/TwitchFeed/app/node_modules/babel-loader/lib/index.js!/Users/kristinhortsch/dev/TwitchFeed/app/node_modules/eslint-loader/index.js??ref--13-0!/Users/kristinhortsch/dev/TwitchFeed/app/src/services/api.js","dependencies":[{"path":"/Users/kristinhortsch/dev/TwitchFeed/app/src/services/api.js","mtime":1545159630396},{"path":"/Users/kristinhortsch/dev/TwitchFeed/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kristinhortsch/dev/TwitchFeed/app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kristinhortsch/dev/TwitchFeed/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kristinhortsch/dev/TwitchFeed/app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nvar token = '';\n\nvar getOptions = function getOptions(method, data) {\n  var options = {\n    method: method,\n    headers: {}\n  };\n\n  if (data) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n  }\n\n  if (token) {\n    options.headers.Authorization = token;\n    console.log('got here', token);\n  }\n\n  return options;\n};\n\nexport default {\n  setToken: function setToken(t) {\n    token = t;\n  },\n  getTopStreamers: function getTopStreamers() {\n    return fetch('/api/twitch', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Client-ID': '8sb2kt99biht5q3k79k7hsejyj0q2y',\n        'Authorization': token\n      }\n    }).then(function (response) {\n      return response.json();\n    });\n  },\n  signUp: function signUp(profile) {\n    return fetch('/api/auth/signup', getOptions('POST', profile)).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return response.json().then(function (error) {\n        return Promise.reject(error);\n      });\n    });\n  },\n  signIn: function signIn(credentials) {\n    return fetch('/api/auth/signin', getOptions('POST', credentials)).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return response.json().then(function (error) {\n        return Promise.reject(error);\n      });\n    });\n  },\n  getStreamers: function getStreamers() {\n    var searchTerm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return fetch(\"https://api.twitch.tv/helix/users?login=\".concat(encodeURIComponent(searchTerm)), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Client-ID': '8sb2kt99biht5q3k79k7hsejyj0q2y'\n      }\n    }).then(function (response) {\n      return response.json();\n    });\n  },\n  getTop100: function getTop100() {\n    return fetch('https://api.twitch.tv/helix/streams?first=100', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Client-ID': '8sb2kt99biht5q3k79k7hsejyj0q2y'\n      }\n    }).then(function (response) {\n      var results = response.body.data.map(function (result) {\n        return {\n          name: result.user_name,\n          views: result.viewer_count,\n          index: result.index\n        };\n      });\n      response.json(results);\n    });\n  }\n};",{"version":3,"sources":["/Users/kristinhortsch/dev/TwitchFeed/app/src/services/api.js"],"names":["token","getOptions","method","data","options","headers","body","JSON","stringify","Authorization","console","log","setToken","t","getTopStreamers","fetch","then","response","json","signUp","profile","ok","error","Promise","reject","signIn","credentials","getStreamers","searchTerm","encodeURIComponent","getTop100","results","map","result","name","user_name","views","viewer_count","index"],"mappings":"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","sourcesContent":["let token = '';\n\nconst getOptions = (method, data) => {\n  const options = {\n    method,\n    headers: {}\n  };\n  if(data) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n  }\n  if(token) {\n    options.headers.Authorization = token;\n    console.log('got here', token); \n  }\n  return options;\n};\n\nexport default {\n  setToken(t) {\n    token = t;\n  },\n  getTopStreamers() {\n    return fetch('/api/twitch', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Client-ID': '8sb2kt99biht5q3k79k7hsejyj0q2y',\n        'Authorization': token\n      }\n    })\n      .then(response => response.json());\n  },\n\n  signUp(profile) {\n    return fetch('/api/auth/signup', getOptions ('POST', profile))\n      .then(response => {\n        if(response.ok) {\n          return response.json();\n        }\n        return response.json()\n          .then(error => {\n            return Promise.reject(error);\n          });\n      });\n  }, \n\n  signIn(credentials) {\n    return fetch('/api/auth/signin', getOptions ('POST', credentials))\n      .then(response => {\n        if(response.ok) {\n          return response.json();\n        }\n        return response.json()\n          .then(error => {\n            return Promise.reject(error);\n          });\n      });\n  },\n\n  getStreamers(searchTerm = '') {\n    return fetch(`https://api.twitch.tv/helix/users?login=${encodeURIComponent(searchTerm)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Client-ID': '8sb2kt99biht5q3k79k7hsejyj0q2y'\n      }\n    })\n      .then(response => response.json());\n  },\n\n  getTop100() {\n    return fetch('https://api.twitch.tv/helix/streams?first=100', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Client-ID': '8sb2kt99biht5q3k79k7hsejyj0q2y'\n      }\n    })\n      .then(response => {\n        const results = response.body.data.map(result => {\n          return {\n            name: result.user_name,\n            views: result.viewer_count,\n            index: result.index\n          };\n        });\n        response.json(results);\n      });\n  }\n};\n\n"]}]}